apiVersion: v1
kind: ConfigMap
metadata:
  name: affine-config
  namespace: affine
data:
  AFFINE_REVISION: "stable"
  AFFINE_SERVER_PORT: "3010"
  AFFINE_SERVER_HTTPS: "true"
  AFFINE_SERVER_HOST: "affine.k8s.max"
  AFFINE_SERVER_EXTERNAL_URL: "https://affine.k8s.max"
  REDIS_URL: "redis://redis:6379"
  DB_USERNAME: "affine"
  DB_DATABASE: "affine"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: affine
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: "longhorn"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: affine-storage-pvc
  namespace: affine
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: affine-config-pvc
  namespace: affine
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: affine
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: affine
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: affine
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: affine
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15
        env:
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: affine-config
              key: DB_USERNAME
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: affine-secrets
              key: DB_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: affine-config
              key: DB_DATABASE
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata/data
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-data
          mountPath: "/var/lib/postgresql/data/"
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: affine
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: affine
  namespace: affine
spec:
  replicas: 1
  selector:
    matchLabels:
      app: affine
  template:
    metadata:
      labels:
        app: affine
    spec:
      initContainers:
      - name: set-database-url
        image: busybox
        command: ["/bin/sh", "-c"]
        args:
        - |
          echo "DATABASE_URL=postgresql://$DB_USERNAME:$DB_PASSWORD@postgres:5432/$DB_DATABASE" > /env/.env
        env:
        - name: DB_USERNAME
          valueFrom:
            configMapKeyRef:
              name: affine-config
              key: DB_USERNAME
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: affine-secrets
              key: DB_PASSWORD
        - name: DB_DATABASE
          valueFrom:
            configMapKeyRef:
              name: affine-config
              key: DB_DATABASE
        volumeMounts:
        - name: env
          mountPath: /env
      - name: config-init
        image: busybox:1.36
        command: ["/bin/sh", "-c"]
        args:
        - |
          echo '{
            "server": {
              "name": "affine.k8s.max"
            },
            "copilot": {
              "enabled": true,
              "providers.openai": {
                "apiKey": "'$OPENAI_API_KEY'"
              }
            }
          }' > /config/config.json
        env:
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: affine-openai-secret
              key: openai-api-key
        volumeMounts:
        - name: affine-config
          mountPath: /config
      containers:
      - name: affine
        image: ghcr.io/toeverything/affine-graphql:0.21.4
        env:
        - name: AFFINE_SERVER_PORT
          valueFrom:
            configMapKeyRef:
              name: affine-config
              key: AFFINE_SERVER_PORT
        - name: AFFINE_SERVER_HTTPS
          valueFrom:
            configMapKeyRef:
              name: affine-config
              key: AFFINE_SERVER_HTTPS
        - name: AFFINE_SERVER_HOST
          valueFrom:
            configMapKeyRef:
              name: affine-config
              key: AFFINE_SERVER_HOST
        - name: AFFINE_SERVER_EXTERNAL_URL
          valueFrom:
            configMapKeyRef:
              name: affine-config
              key: AFFINE_SERVER_EXTERNAL_URL
        - name: REDIS_SERVER_HOST
          value: "redis"
        - name: NODE_OPTIONS
          value: "--import=./scripts/register.js"
        - name: AFFINE_CONFIG_PATH
          value: "/root/.affine/config"
        - name: NODE_ENV
          value: "production"
        envFrom:
        - configMapRef:
            name: affine-env
            optional: true
        command: ["/bin/sh", "-c"]
        args:
        - |
          echo "Running pre-deployment script..."
          node ./scripts/self-host-predeploy
          echo "Starting affine-graphql service..."
          exec node ./dist/index.js
        ports:
        - containerPort: 3010
        - containerPort: 5555
        volumeMounts:
        - name: affine-storage
          mountPath: /root/storage
        - name: affine-config
          mountPath: /root/.affine/config
        - name: env
          mountPath: /app/.env
          subPath: .env
      volumes:
      - name: affine-storage
        persistentVolumeClaim:
          claimName: affine-storage-pvc
      - name: affine-config
        persistentVolumeClaim:
          claimName: affine-config-pvc
      - name: env
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: affine
  namespace: affine
spec:
  selector:
    app: affine
  ports:
  - name: http
    port: 3010
    targetPort: 3010
  - name: debug
    port: 5555
    targetPort: 5555
  type: ClusterIP
