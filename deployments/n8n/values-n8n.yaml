# Default helm values for n8n.

n8n:
  encryption_key: ""

env:
  # - name: DB_POSTGRESDB_PASSWORD
  #   valueFrom:
  #     secretKeyRef:
  #       name: n8n-secrets
  #       key: db_password
  - name: N8N_ENCRYPTION_KEY
    valueFrom:
      secretKeyRef:
        name: n8n-secrets
        key: N8N_ENCRYPTION_KEY

config:
  database:
    type: postgresdb
    postgresdb:
      database: n8n
      host: postgres.affine.svc.cluster.local 
      port: 5432
      user: affine 
      schema: public
  executions:
    pruneData: "true"
    pruneDataMaxAge: 8760
  generic:
    timezone: "UTC" 

# secret:
#   database:
#     postgresdb:
#       password: ""

env:
  - name: DB_TYPE
    value: postgresdb
  - name: DB_POSTGRESDB_HOST
    value: postgres.affine.svc.cluster.local
  - name: DB_POSTGRESDB_PORT
    value: "5432"
  - name: DB_POSTGRESDB_DATABASE
    value: n8n
  - name: DB_POSTGRESDB_USER
    value: affine

extraEnv:
  NODE_FUNCTION_ALLOW_EXTERNAL: "*"
  N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: "true"
  OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS: "true"
  # DB_POSTGRESDB_PASSWORD: "@wecook12ll!"
  WEBHOOK_URL: "https://5b62-142-115-96-170.ngrok-free.app"
  N8N_BASIC_AUTH_ACTIVE: "true"
  N8N_HOST: "n8n.k8s.max"
  N8N_LOG_LEVEL: "debug"
  N8N_RUNNERS_ENABLED: "true"
  N8N_CONCURRENCY: "50"
  N8N_RUNNERS_TASK_TIMEOUT: "60000"
  EXECUTIONS_TIMEOUT: "10800000"
  # DB_POSTGRESDB_PASSWORD:
  #   valueFrom:
  #     secretKeyRef:
  #       name: n8n-secrets
  #       key: db_password
  # DB_TYPE: "postgresdb"
  # DB_POSTGRESDB_HOST: "postgres.affine.svc.cluster.local"
  # DB_POSTGRESDB_PORT: "5432"
  # DB_POSTGRESDB_DATABASE: "n8n"
  # DB_POSTGRESDB_USER: "affine"
  # EXECUTIONS_MODE: "regular"

extraEnvSecrets:
  DB_POSTGRESDB_PASSWORD:
    name: n8n-secrets
    key: db_password
# extraEnvSecrets:
#   DB_POSTGRESDB_PASSWORD:
#     name: affine-secrets
#     key: DB_PASSWORD 
  # REDIS_PASSWORD:
  #   name: affine-secrets
  #   key: redis-password

persistence:
  enabled: true
  type: dynamic
  storageClass: "longhorn" 
  accessModes:
    - ReadWriteOnce
  size: 5Gi

replicaCount: 1

deploymentStrategy:
  type: "RollingUpdate"
  maxSurge: "25%"
  maxUnavailable: "25%"

image:
  repository: stantaov/n8n
  pullPolicy: Always 
  tag: "1.98.1" 

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}
podLabels: {}
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000

securityContext: {}

livenessProbe:
  httpGet:
    path: /healthz
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

readinessProbe:
  httpGet:
    path: /healthz
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

service:
  type: ClusterIP
  port: 80
  annotations: {}

ingress:
  enabled: false
  hosts:
    - host: n8n.k8s.max
      paths:
        - path: /
          pathType: Prefix

workerResources: {}
webhookResources: {}
resources: {}
  # limits:
  #   cpu: 500m
  #   memory: 512Mi
  # requests:
  #   cpu: 200m
  #   memory: 256Mi

autoscaling:
  enabled: false

nodeSelector: {}
tolerations: []
affinity: {}

scaling:
  enabled: false
  worker:
    count: 2
    concurrency: 10
  webhook:
    enabled: false
    count: 1

redis:
  enabled: false
